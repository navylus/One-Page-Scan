{"version":3,"sources":["components/MainComponent/manga.js","components/MainComponent/index.js","App.js","serviceWorker.js","index.js"],"names":["mangas","MainComponent","props","renderImage","chapter","manga","res","page","isError","str","pad","ext","ans","substring","length","push","className","onError","i","target","src","style","display","onLoad","alt","e","Selector","chapterNumber","value","onChange","setState","map","key","onClick","type","window","scrollTo","parseInt","location","href","split","state","this","tableImage","url","color","rel","fontSize","fontStyle","cursor","React","Component","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.021a3f39.chunk.js","sourcesContent":["export const mangas = [\n  'Beelzebub',\n  'Black-Clover',\n  'Bleach',\n  'Boruto',\n  'D-Gray-Man',\n  'Dr-Stone',\n  'Dragon-Ball-Super',\n  'Fairy-Tail',\n  'Gantz',\n  'Gintama',\n  'Hajime-No-Ippo',\n  'Hunter-X-Hunter',\n  'Magi',\n  'My-Hero-Academia',\n  'Naruto',\n  'Naruto-Gaiden',\n  'One-Piece',\n  'One-Punch-Man',\n  'Shingeki-No-Kyojin',\n  'Soul-Eater',\n  'The-Breaker-New-Waves',\n  'The-Seven-Deadly-Sins',\n  'Tokyo-Ghoul-Re',\n  'Tokyo-Shinobi-Squad',\n  'Toriko'\n]\n","import React from 'react'\nimport './style.css'\nimport { mangas } from './manga'\n\nclass MainComponent extends React.Component {\n  constructor(props) {\n    super(props)\n    const chapter =\n      parseInt(\n        window.location.href.split('/')[\n          window.location.href.split('/').length - 1\n        ]\n      ) | 160\n    this.state = {\n      manga: 'One-Punch-Man',\n      chapterNumber: chapter\n    }\n    this.mangas = mangas\n  }\n\n  renderImage = (chapter, manga) => {\n    const res = []\n    let page = 1\n    while (page < 31) {\n      let isError = false\n      let str = '' + page\n      let pad = '00'\n      let ext = 'jpg'\n      let ans = pad.substring(0, pad.length - str.length) + str\n      try {\n        res.push(\n          <div className=\"page\">\n            <img\n              onError={i => {\n                if (!isError) {\n                  pad = pad + '0'\n                  ans = pad.substring(0, pad.length - str.length) + str\n                  i.target.src = `https://c.japscan.co/lel/${manga}/${chapter}/${ans}.${ext}`\n                  if (pad.length > 3) {\n                    i.target.style.display = 'none'\n                    if (pad.length > 3 && ext === 'png') {\n                      isError = true\n                    }\n                    ext = 'png'\n                    pad = '0'\n                  }\n                }\n              }}\n              onLoad={i => {\n                i.target.style.display = 'flex'\n              }}\n              src={`https://c.japscan.co/lel/${manga}/${chapter}/${ans}.jpg`}\n              alt=\"page\"\n            ></img>\n          </div>\n        )\n        page += 1\n      } catch (e) {\n        return\n      }\n    }\n    return res\n  }\n\n  Selector = ({ chapterNumber, manga }) => {\n    return (\n      <div className=\"buttons\">\n        <select\n          value={manga}\n          onChange={e => this.setState({ manga: e.target.value })}\n        >\n          {this.mangas.map(manga => (\n            <option key={manga} value={manga}>\n              {manga}\n            </option>\n          ))}\n        </select>\n        <button\n          onClick={() => this.setState({ chapterNumber: (chapterNumber -= 1) })}\n        >\n          prev\n        </button>\n        <input\n          type=\"text\"\n          value={chapterNumber}\n          onChange={e => {\n            this.setState({ chapterNumber: e.target.value })\n          }}\n        ></input>\n        <button\n          onClick={() => {\n            this.setState({ chapterNumber: (chapterNumber += 1) })\n            window.scrollTo(0, 0)\n          }}\n        >\n          next\n        </button>\n      </div>\n    )\n  }\n\n  render() {\n    let { chapterNumber, manga } = this.state\n    const tableImage = this.renderImage(chapterNumber, manga)\n    const url = `https://www.japscan.co/lecture-en-ligne/${manga}/${chapterNumber}/`\n    return (\n      <div className=\"container\">\n        <this.Selector chapterNumber={parseInt(chapterNumber)} manga={manga} />\n        <div style={{ color: 'white' }}>\n          Scan Original:{' '}\n          <a rel=\"noopener noreferrer\" target=\"_blank\" href={url}>\n            {url}\n          </a>\n        </div>\n        <div className=\"content\">{tableImage}</div>\n        <this.Selector chapterNumber={parseInt(chapterNumber)} manga={manga} />\n        <p\n          style={{\n            fontSize: '20px',\n            fontStyle: 'underline',\n            cursor: 'pointer',\n            color: 'white'\n          }}\n          onClick={() => window.scrollTo(0, 0)}\n        >\n          Go to top\n        </p>\n      </div>\n    )\n  }\n}\n\nexport default MainComponent\n","import React from 'react'\nimport MainComponent from \"./components/MainComponent\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainComponent />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}