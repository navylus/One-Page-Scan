{"version":3,"sources":["components/MainComponent/manga.js","components/MainComponent/index.js","App.js","serviceWorker.js","index.js"],"names":["mangas","MainComponent","props","renderImage","chapter","manga","res","page","isError","str","pad","ext","ans","substring","length","push","className","onError","i","target","src","style","display","onLoad","alt","e","Selector","chapterNumber","value","onChange","setState","map","key","onClick","type","window","scrollTo","parseInt","location","href","split","state","this","tableImage","url","color","rel","fontSize","fontStyle","cursor","React","Component","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPAAaA,G,MAAS,CACpB,mBACA,qBACA,YACA,eACA,SACA,SACA,aACA,WACA,oBACA,aACA,QACA,UACA,iBACA,kBACA,OACA,oBACA,SACA,gBACA,YACA,gBACA,aACA,wBACA,wBACA,iBACA,sBACA,WC2GaC,E,YAhIb,WAAYC,GAAQ,IAAD,uBACjB,4CAAMA,KAcRC,YAAc,SAACC,EAASC,GAGtB,IAFA,IAAMC,EAAM,GACRC,EAAO,EAFqB,aAI9B,IAAIC,GAAU,EACVC,EAAM,GAAKF,EACXG,EAAM,KACNC,EAAM,MACNC,EAAMF,EAAIG,UAAU,EAAGH,EAAII,OAASL,EAAIK,QAAUL,EACtD,IACEH,EAAIS,KACF,yBAAKC,UAAU,QACb,yBACEC,QAAS,SAAAC,GACFV,IAEHI,GADAF,GAAY,KACFG,UAAU,EAAGH,EAAII,OAASL,EAAIK,QAAUL,EAClDS,EAAEC,OAAOC,IAAT,mCAA2Cf,EAA3C,YAAoDD,EAApD,YAA+DQ,EAA/D,YAAsED,GAClED,EAAII,OAAS,IACfI,EAAEC,OAAOE,MAAMC,QAAU,OACrBZ,EAAII,OAAS,GAAa,QAARH,IACpBH,GAAU,GAEZG,EAAM,MACND,EAAM,OAIZa,OAAQ,SAAAL,GACNA,EAAEC,OAAOE,MAAMC,QAAU,QAE3BF,IAAG,mCAA8Bf,EAA9B,YAAuCD,EAAvC,YAAkDQ,EAAlD,QACHY,IAAI,WAIVjB,GAAQ,EACR,MAAOkB,GACP,MAAM,CAAN,YAnCGlB,EAAO,IAAI,CAAC,IAAD,wCAsClB,OAAOD,GAxDU,EA2DnBoB,SAAW,YAA+B,IAA5BC,EAA2B,EAA3BA,cAAetB,EAAY,EAAZA,MAC3B,OACE,yBAAKW,UAAU,WACb,4BACEY,MAAOvB,EACPwB,SAAU,SAAAJ,GAAC,OAAI,EAAKK,SAAS,CAAEzB,MAAOoB,EAAEN,OAAOS,UAE9C,EAAK5B,OAAO+B,KAAI,SAAA1B,GAAK,OACpB,4BAAQ2B,IAAK3B,EAAOuB,MAAOvB,GACxBA,OAIP,4BACE4B,QAAS,kBAAM,EAAKH,SAAS,CAAEH,cAAgBA,GAAiB,MADlE,QAKA,2BACEO,KAAK,OACLN,MAAOD,EACPE,SAAU,SAAAJ,GACR,EAAKK,SAAS,CAAEH,cAAeF,EAAEN,OAAOS,WAG5C,4BACEK,QAAS,WACP,EAAKH,SAAS,CAAEH,cAAgBA,GAAiB,IACjDQ,OAAOC,SAAS,EAAG,KAHvB,UAlFJ,IAAMhC,EAKA,IAJJiC,SACEF,OAAOG,SAASC,KAAKC,MAAM,KAC3BL,OAAOG,SAASC,KAAKC,MAAM,KAAK1B,OAAS,IAL5B,OAQjB,EAAK2B,MAAQ,CACXpC,MAAO,mBACPsB,cAAevB,GAEjB,EAAKJ,OAASA,EAZG,E,sEAgGT,IAAD,EACwB0C,KAAKD,MAA9Bd,EADC,EACDA,cAAetB,EADd,EACcA,MACfsC,EAAaD,KAAKvC,YAAYwB,EAAetB,GAC7CuC,EAAG,kDAA8CvC,EAA9C,YAAuDsB,EAAvD,KACT,OACE,yBAAKX,UAAU,aACb,uBAAMU,SAAN,CAAeC,cAAeU,SAASV,GAAgBtB,MAAOA,IAC9D,yBAAKgB,MAAO,CAAEwB,MAAO,UAArB,iBACiB,IACf,uBAAGC,IAAI,sBAAsB3B,OAAO,SAASoB,KAAMK,GAChDA,GAHL,yEAOA,yBAAK5B,UAAU,WAAW2B,GAC1B,uBAAMjB,SAAN,CAAeC,cAAeU,SAASV,GAAgBtB,MAAOA,IAC9D,uBACEgB,MAAO,CACL0B,SAAU,OACVC,UAAW,YACXC,OAAQ,UACRJ,MAAO,SAETZ,QAAS,kBAAME,OAAOC,SAAS,EAAG,KAPpC,kB,GAjHoBc,IAAMC,WCOnBC,MARf,WACE,OACE,yBAAKpC,UAAU,OACb,kBAAC,EAAD,QCMcqC,QACW,cAA7BlB,OAAOG,SAASgB,UAEe,UAA7BnB,OAAOG,SAASgB,UAEhBnB,OAAOG,SAASgB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.1786ecde.chunk.js","sourcesContent":["export const mangas = [\r\n  'My-Hero-Academia',\r\n  'Shingeki-No-Kyojin',\r\n  'Beelzebub',\r\n  'Black-Clover',\r\n  'Bleach',\r\n  'Boruto',\r\n  'D-Gray-Man',\r\n  'Dr-Stone',\r\n  'Dragon-Ball-Super',\r\n  'Fairy-Tail',\r\n  'Gantz',\r\n  'Gintama',\r\n  'Hajime-No-Ippo',\r\n  'Hunter-X-Hunter',\r\n  'Magi',\r\n  'Nanatsu-No-Taizai',\r\n  'Naruto',\r\n  'Naruto-Gaiden',\r\n  'One-Piece',\r\n  'One-Punch-Man',\r\n  'Soul-Eater',\r\n  'The-Breaker-New-Waves',\r\n  'The-Seven-Deadly-Sins',\r\n  'Tokyo-Ghoul-Re',\r\n  'Tokyo-Shinobi-Squad',\r\n  'Toriko'\r\n]\r\n","import React from 'react'\r\nimport './style.css'\r\nimport { mangas } from './manga'\r\n\r\nclass MainComponent extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    const chapter =\r\n      parseInt(\r\n        window.location.href.split('/')[\r\n        window.location.href.split('/').length - 1\r\n        ]\r\n      ) | 193\r\n    this.state = {\r\n      manga: 'My-Hero-Academia',\r\n      chapterNumber: chapter\r\n    }\r\n    this.mangas = mangas\r\n  }\r\n\r\n  renderImage = (chapter, manga) => {\r\n    const res = []\r\n    let page = 1\r\n    while (page < 31) {\r\n      let isError = false\r\n      let str = '' + page\r\n      let pad = '00'\r\n      let ext = 'jpg'\r\n      let ans = pad.substring(0, pad.length - str.length) + str\r\n      try {\r\n        res.push(\r\n          <div className=\"page\">\r\n            <img\r\n              onError={i => {\r\n                if (!isError) {\r\n                  pad = pad + '0'\r\n                  ans = pad.substring(0, pad.length - str.length) + str\r\n                  i.target.src = `https://c.japscan.se/lel/${manga}/${chapter}/${ans}.${ext}`\r\n                  if (pad.length > 3) {\r\n                    i.target.style.display = 'none'\r\n                    if (pad.length > 3 && ext === 'png') {\r\n                      isError = true\r\n                    }\r\n                    ext = 'png'\r\n                    pad = '0'\r\n                  }\r\n                }\r\n              }}\r\n              onLoad={i => {\r\n                i.target.style.display = 'flex'\r\n              }}\r\n              src={`https://c.japscan.se/lel/${manga}/${chapter}/${ans}.jpg`}\r\n              alt=\"page\"\r\n            ></img>\r\n          </div>\r\n        )\r\n        page += 1\r\n      } catch (e) {\r\n        return\r\n      }\r\n    }\r\n    return res\r\n  }\r\n\r\n  Selector = ({ chapterNumber, manga }) => {\r\n    return (\r\n      <div className=\"buttons\">\r\n        <select\r\n          value={manga}\r\n          onChange={e => this.setState({ manga: e.target.value })}\r\n        >\r\n          {this.mangas.map(manga => (\r\n            <option key={manga} value={manga}>\r\n              {manga}\r\n            </option>\r\n          ))}\r\n        </select>\r\n        <button\r\n          onClick={() => this.setState({ chapterNumber: (chapterNumber -= 1) })}\r\n        >\r\n          prev\r\n        </button>\r\n        <input\r\n          type=\"text\"\r\n          value={chapterNumber}\r\n          onChange={e => {\r\n            this.setState({ chapterNumber: e.target.value })\r\n          }}\r\n        ></input>\r\n        <button\r\n          onClick={() => {\r\n            this.setState({ chapterNumber: (chapterNumber += 1) })\r\n            window.scrollTo(0, 0)\r\n          }}\r\n        >\r\n          next\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    let { chapterNumber, manga } = this.state\r\n    const tableImage = this.renderImage(chapterNumber, manga)\r\n    const url = `https://www.japscan.se/lecture-en-ligne/${manga}/${chapterNumber}/`\r\n    return (\r\n      <div className=\"container\">\r\n        <this.Selector chapterNumber={parseInt(chapterNumber)} manga={manga} />\r\n        <div style={{ color: 'white' }}>\r\n          Scan Original:{' '}\r\n          <a rel=\"noopener noreferrer\" target=\"_blank\" href={url}>\r\n            {url}\r\n          </a>\r\n          Si l'image ne charge pas essaye d'ouvrir le lien dans un autre onglet\r\n        </div>\r\n        <div className=\"content\">{tableImage}</div>\r\n        <this.Selector chapterNumber={parseInt(chapterNumber)} manga={manga} />\r\n        <p\r\n          style={{\r\n            fontSize: '20px',\r\n            fontStyle: 'underline',\r\n            cursor: 'pointer',\r\n            color: 'white'\r\n          }}\r\n          onClick={() => window.scrollTo(0, 0)}\r\n        >\r\n          Go to top\r\n        </p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MainComponent\r\n","import React from 'react'\r\nimport MainComponent from \"./components/MainComponent\"\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <MainComponent />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}